name: KonvoAI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # Code Quality & Security
  # =============================================================================
  lint-and-security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Lint Python code
      run: |
        cd backend
        python -m flake8 app/
        python -m black --check app/
        python -m isort --check-only app/
    
    - name: Type check Python code
      run: |
        cd backend
        python -m mypy app/
    
    - name: Lint TypeScript code
      run: |
        cd frontend
        npm run lint
    
    - name: Security scan - Python
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: backend/requirements.txt
    
    - name: Security scan - Node.js
      run: |
        cd frontend
        npm audit --audit-level=high

  # =============================================================================
  # Backend Tests
  # =============================================================================
  test-backend:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Run tests
      env:
        ENVIRONMENT: test
        SECRET_KEY: test-secret-key
        REDIS_URL: redis://localhost:6379/0
        AZURE_SPEECH_KEY: ${{ secrets.AZURE_SPEECH_KEY }}
        AZURE_SPEECH_REGION: ${{ secrets.AZURE_SPEECH_REGION }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        cd backend
        python -m pytest -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

  # =============================================================================
  # Frontend Validation
  # =============================================================================
  validate-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Validate HTML
      run: |
        # Install HTML validator
        npm install -g html-validate

        # Validate HTML files
        html-validate frontend/public/index.html

    - name: Check file structure
      run: |
        # Verify required files exist
        test -f frontend/public/index.html
        test -f frontend/Dockerfile
        test -f frontend/nginx.conf
        echo "Frontend structure validation passed"

  # =============================================================================
  # Build Docker Images
  # =============================================================================
  build-images:
    runs-on: ubuntu-latest
    needs: [lint-and-security, test-backend, validate-frontend]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.component }}
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =============================================================================
  # Integration Tests
  # =============================================================================
  integration-tests:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
    
    - name: Create test environment file
      run: |
        cat > .env << EOF
        ENVIRONMENT=test
        SECRET_KEY=test-secret-key
        AZURE_SPEECH_KEY=${{ secrets.AZURE_SPEECH_KEY }}
        AZURE_SPEECH_REGION=${{ secrets.AZURE_SPEECH_REGION }}
        ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
        REDIS_URL=redis://redis-test:6379/0
        EOF
    
    - name: Run integration tests
      run: |
        docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit integration-test
        docker-compose -f docker-compose.test.yml down

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security-scan:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'push'
    
    permissions:
      security-events: write
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.component }}.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results-${{ matrix.component }}.sarif'

  # =============================================================================
  # Deploy to Staging
  # =============================================================================
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.fixverse.se
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment logic here
        # This could involve SSH to staging server, kubectl apply, etc.

  # =============================================================================
  # Deploy to Production
  # =============================================================================
  deploy-production:
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://fixverse.se
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment logic here
        # This should include proper blue-green deployment or rolling updates

  # =============================================================================
  # Notification
  # =============================================================================
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
